create database RETAIL_SALES_ANALYSIS
USE RETAIL_SALES_ANALYSIS

-- CREATE TABLE-- 
CREATE TABLE RETAIL_SALES 
(transactions_id INT PRIMARY KEY,
	sale_date DATE,
	sale_time TIME,
	customer_id INT,
	gender varchar(10),
	age int,
	category varchar(20),
	quantiy int,
	price_per_unit float,
	cogs float,
	total_sale float) 
    SELECT * FROM RETAIL_SALES

-- DATA EXPLORATION AND CLEANING 

SELECT COUNT(DISTINCT customer_id) from RETAIL_SALES 
SELECT DISTINCT category from RETAIL_SALES 

SELECT * FROM RETAIL_SALES 
WHERE transactions_id IS NULL OR sale_date IS NULL 
     OR sale_time IS NULL customer_id IS NULL OR gender IS NULL OR age IS NULL	
	 OR category IS NULL OR quantiy IS NULL OR price_per_unit IS NULL OR	cogs IS NULL 

DELETE FROM RETAIL_SALES 
WHERE transactions_id IS NULL OR sale_date IS NULL 
     OR sale_time IS NULL customer_id IS NULL OR gender IS NULL OR age IS NULL	
     OR category IS NULL OR quantiy IS NULL OR price_per_unit IS NULL OR	cogs IS NULL

            -- DATA ANALYS 
-- WRITE SQL QUERY TO RETRIVE ALL THE COLUMNS SALES MADE ON '2022-11-5 
SELECT *
FROM RETAIL_SALES
WHERE SALE_DATE = "2022-11-5" 

-- WRITE SQL QUERY TO RETRIVE ALL THE TRANSACTION WHERE THE CATEGORY IS 'CLOTHING' AND QUANTITY SOLD MORE THEN 4 IN MONTHG OFF NOVEMBER 2022
SELECT category,sum(total_sale)
FROM RETAIL_SALES  
WHERE 
     category = 'Clothing' 
	 AND DATE_FORMAT(sale_date, '%Y-%m') = '2022-11'
     AND quantiy >=4
GROUP BY 1

-- WRITE SQL QUERY TO CALCULATE TOTAL SALES FOR EACH CATEGORY 
SELECT category,SUM(total_sale),count(quantiy)
FROM RETAIL_SALES 
GROUP BY category

-- WRITE SQL QUERY TO FIND AVERAGE AGE OF CUSTOMER WHO PURCHASE ITEMS FROM 'BEAUTY' CATEGORY 
 SELECT ROUND(AVG(age)) AS AVG_AGE 
 FROM RETAIL_SALES 
 WHERE category = 'Beauty'
 
 -- WRITE SQL QUERY TO FIND ALL TRANSACTIONS WHERE THE TOTAL_SALES IS GREATER THE 1000
 SELECT * 
 FROM RETAIL_SALES 
 WHERE TOTAL_SALE = 1000

-- WRITE SQL QUERY TO FIND THE TOTAL NUMBER OF TRANSACTIONS MADE BY EACH GENDER AND EACH CATEGORY 
SELECT 
      gender, category,COUNT(transactions_id) as TOTAL_TRANSACTIONS
FROM RETAIL_SALES 
GROUP BY 1,2

-- WRITE SQL QUERY TO FIND AVERAGE SALE OF MONTH AND FIND OUT THE BEST SELLING MONTH IN EACH YEAR 
WITH MONTHLY_RANKED AS (
SELECT 
      YEAR(sale_date) AS SALES_YEAR,MONTH(sale_date) AS SALES_MONTH,ROUND(AVG(total_sale))as TOTAL_SALES,
      RANK()OVER(PARTITION BY YEAR(SALE_DATE) ORDER BY AVG(total_sale) DESC) AS MONTH_RANK
FROM RETAIL_SALES 
GROUP BY 1,2)
SELECT SALES_YEAR,SALES_MONTH,TOTAL_SALES,MONTH_RANK
FROM MONTHLY_RANKED 
WHERE MONTH_RANK = 1

-- SAME QUERY WITH DIFFRENT APPROACH 
SELECT * FROM 
(SELECT 
      YEAR(sale_date) AS SALES_YEAR,MONTH(sale_date) AS SALES_MONTH,ROUND(AVG(total_sale))as TOTAL_SALES,
      RANK()OVER(PARTITION BY YEAR(SALE_DATE) ORDER BY AVG(total_sale) DESC) AS MONTH_RANK
FROM RETAIL_SALES 
GROUP BY 1,2) AS T1 
WHERE MONTH_RANK = 1

-- WRITE THE QUERY TO FIND TOP 5 CUSTOMERS BASED ON THERE HIGHEST TOTAL SALES 
SELECT customer_id,sum(total_sale) as HIGHEST_SALES 
FROM RETAIL_SALES
GROUP BY 1 
ORDER BY HIGHEST_SALES DESC 
LIMIT 5

-- WRITE SQL QUERY TO FIND UNIQUE CUSTOMERS WHO PURCHASED IN EACH CATEGORY
SELECT category,COUNT(DISTINCT customer_id)
FROM RETAIL_SALES 
GROUP BY 1

-- WRITE SQL QUERY TO CREATE EACH SHIFT AND NUMBER OF ORDERS (EXAMPLE MORNING <12 AND AFTERNON BETWEEN 12 TO 17 AND EVINIG >17)
WITH HOURLY_SALES AS (
SELECT *,
         CASE 
          WHEN HOUR(SALE_TIME) < 12 THEN "MORNING"
		  WHEN HOUR(SALE_TIME) BETWEEN 12 AND 17 THEN "AFTERNON" 
          ELSE "EVINING"
          END AS SHIFT
FROM RETAIL_SALES )
SELECT SHIFT,COUNT(customer_id) as TOTAL_ORDERS
FROM HOURLY_SALES 
GROUP BY SHIFT
 
-- END PROJECT